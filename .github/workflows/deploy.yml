name: Build, Test & Deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build
      - name: Docker Login
        if: github.ref == 'refs/heads/master'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/master'
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/quetext-clone-dev:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/quetext-clone-dev:latest

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: SSH into server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Set Docker image and container name
            # switch to bash
            bash -c '
              DOCKER_HUB_USERNAME="${{ secrets.DOCKER_HUB_USERNAME }}"
              CONTAINER_NAME="quetext-clone-dev"
              NETWORK_NAME="npm_network"
              ENV_FILE_PATH="/opt/env-files/quetext-clone-dev/.env"

            # create env file 
            mkdir -p /opt/env-files/quetext-clone-dev
            if [ -f "$ENV_FILE_PATH" ]; then
                echo "Removing existing env file..."
                rm "$ENV_FILE_PATH"
              fi
            cat > /opt/env-files/quetext-clone-dev/.env << EOL
              MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
              MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
              MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}
              MONGODB_URI=${{ secrets.MONGODB_URI }}
              NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
              COPYLEAKS_EMAIL=${{ secrets.COPYLEAKS_EMAIL }}
              COPYLEAKS_API_KEY=${{ secrets.COPYLEAKS_API_KEY }}
              API_URL_AUTH=${{ secrets.API_URL_AUTH }}
              API_URL_BASE=${{ secrets.API_URL_BASE }}
              GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
              GOOGLE_CSE_ID=${{ secrets.GOOGLE_CSE_ID }}
            EOL

              
             # Pull the latest image
              docker pull ${DOCKER_HUB_USERNAME}/quetext-clone-dev:latest

             # Stop and remove existing container if it exists
              if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
                docker stop $CONTAINER_NAME
                docker rm $CONTAINER_NAME
              fi
            # Kiểm tra xem network đã tồn tại chưa, nếu chưa thì tạo mới
              if ! docker network inspect ${NETWORK_NAME} &>/dev/null; then
                docker network create ${NETWORK_NAME}
                echo "Created network ${NETWORK_NAME}"
              fi

             # Run new container
              docker run -d \
                --name $CONTAINER_NAME \
                -p 3001:3001 \
                -e NODE_ENV=production \
                --env-file /opt/env-files/quetext-clone-dev/.env \
                --network ${NETWORK_NAME} \
                --restart unless-stopped \
                ${DOCKER_HUB_USERNAME}/quetext-clone-dev:latest
            '
